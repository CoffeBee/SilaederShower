<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>Shower page</title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  </head>
  <body id="bdd">
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Raleway:wght@300;400;500;600;700&display=swap');
        h1 {
          font-family: 'Raleway';
          font-size: 100px;
          font-weight: 700;
          max-width: 75vw;
          text-align: center;
          color: #464255;
        }
        #wait {
          width: 100vw;
          height: 100vh;
          display: flex;
          justify-content: center;
          align-items: center;
          text-align: center;
          

          background: rgba(183, 219, 249, 0.15);

        }
    </style>

    <div id="wait" style="display: none">
      <h1>Ожидаем следующего докладчика</h1>
    </div>
    <canvas style="opacity: 0;" id="the-canvas"></canvas>
    <script src="https://cdn.jsdelivr.net/npm/pdfjs-dist@2.16.105/build/pdf.min.js"></script>
    <script>
      var canvas = document.getElementById('the-canvas');
      var ctx = canvas.getContext('2d');
      function fullscreen() {
        var el = document.getElementById('the-canvas');
        if (el.webkitRequestFullScreen) {
          el.webkitRequestFullScreen();
        } else {
          el.mozRequestFullScreen();
        }
      }
      function drawPage(index) {
          index -= 1;
          var img = new Image;
          img.onload = function() {
              /* this will draw the image loaded onto canvas at position 0,0
                 at the optional width and height of the canvas.
                 'this' is current image loaded 
              */
              canvas.style.opacity = "1";
              ctx.drawImage(this, 0, 0, ctx.canvas.width, ctx.canvas.height);
          }
          img.src = pages[index];  // start loading the data-uri as source
      }
      canvas.addEventListener("click", fullscreen)
      var loadingTask = null
        var ppdf = null;
        var nowPage = 1;
        var pages = [];
      function load_pres(url) {
        loadingTask = pdfjsLib.getDocument(url);
        ppdf = null;
        nowPage = 1;
        pages = [];
        loadingTask.promise.then(function(pdf) {
          ppdf = pdf;
          canvas.style.opacity = "0";
          function done() {
              drawPage(1);
          }
          function iterate(pdf) {
              var currentPage = 1
              // init parsing of first page
              if (currentPage <= pdf.numPages) getPage();

              // main entry point/function for loop
              function getPage() {

                  // when promise is returned do as usual
                  pdf.getPage(currentPage).then(function(page) {

                      var scale = Math.min(window.innerWidth / page.getViewport({
                        scale: 1.0
                      }).width, window.innerHeight / page.getViewport({
                        scale: 1.0
                      }).height)
                      var viewport = page.getViewport({
                        scale: scale
                      });
                      // Support HiDPI-screens.
                      var outputScale = window.devicePixelRatio || 1;
                      var canvas = document.getElementById('the-canvas');
                      var context = canvas.getContext('2d');
                      canvas.width = Math.floor(viewport.width * outputScale);
                      canvas.height = Math.floor(viewport.height * outputScale);
                      canvas.style.width = Math.floor(viewport.width) + "px";
                      canvas.style.height = Math.floor(viewport.height) + "px";
                      var transform = outputScale !== 1 ? [outputScale, 0, 0, outputScale, 0, 0] : null;
                      var renderContext = {
                        canvasContext: context,
                        transform: transform,
                        viewport: viewport
                      };

                      // now, tap into the returned promise from render:
                      page.render(renderContext).promise.then(function() {

                          // store compressed image data in array
                          pages.push(canvas.toDataURL());

                          if (currentPage < pdf.numPages) {
                              currentPage++;
                              getPage();        // get next page
                          }
                          else {
                              done();           // call done() when all pages are parsed
                          }
                      });
                  });
              }

          }

          iterate(ppdf)

        });

        function next() {
          if (nowPage === ppdf.numPages) {
            return;
          }
          nowPage += 1;
          axios({
              method: 'post',
              url: '/cf/sh/slide/#(confID)',
              data: {
                slide: nowPage,
              }
            }).then(function (response) {
             console.log(response);
           })
           .catch(function (error) {
             console.log(error);
           });
          
	}
        function prev() {
          if (nowPage === 1) {
            return;
          }
          nowPage -= 1;
          axios({
              method: 'post',
              url: '/cf/sh/slide/#(confID)',
              data: {
                slide: nowPage,
              }
            }).then(function (response) {
             console.log(response);
           })
           .catch(function (error) {
             console.log(error);
           });
          
        }
        document.onkeydown = checkKey;

        function checkKey(e) {
          e = e || window.event;
          if (e.keyCode == '38' || e.keyCode === 33) {
            prev();
            // up arrow
          } else if (e.keyCode == '40' || e.keyCode === 34) {
            next();
            // down arrow
          } else if (e.keyCode == '37') {
            prev();
          } else if (e.keyCode == '39') {
            next();
          }
        }
      }
      function openSocket() {
        var socket = new WebSocket(`ws://${(window.location.host + window.location.pathname).replace('admin', 'ws')}`);
        socket.onopen = function() {};
        var video_slides = [];
        var video_links = {};
        socket.onmessage = function(event) {
          const msg = JSON.parse(event.data);
          if (msg.type == "presentation") {
            var id = msg.data.newID
            if (id == -1) {
              document.getElementById("wait").style.display = "flex"
              document.getElementById("the-canvas").style.display = "none"
            } else {
              document.getElementById("wait").style.display = "none"
              document.getElementById("the-canvas").style.display = "block"
            }
            var url = "http://api.conference.silaeder.ru/project/";
            var http = new XMLHttpRequest();
            http.open("GET", url + id, true);
            http.onload = function() {
              if (http.readyState === http.DONE) {
                if (http.status === 200) {
                  // console.log(http.response);
                  console.log(id);
                  console.log(http.responseText);
                  var response = http.responseText;
                  var jsonObject = JSON.parse(response);
                  load_pres(jsonObject.presentation.pdf);
                  video_slides = [];
                  video_links = {};
                  nowPage = 1;
                  for (var video of jsonObject.presentation.videos) {
                    video_slides.push(parseInt(video.after_slide));
                    video_links[parseInt(video.after_slide)] = video.YT;
                  }
                }
              }
            };
            http.send(null);
          } else {
            let slide = msg.data.slide;
            nowPage = slide
            if (video_slides.includes(nowPage)) {
              window.open(`/video/${video_links[nowPage]}`, '_blank').focus();
            }
            drawPage(nowPage)
          }
          
        };
        socket.onclose = function(event) {
          setTimeout(openSocket, 1000);
        };
      }
      openSocket()
      
    </script>
  </body>
</html>
