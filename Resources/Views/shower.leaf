<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>Shower page</title>
  </head>
  <body id="bdd">
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Raleway:wght@300;400;500;600;700&display=swap');
        h1 {
          font-family: 'Raleway';
          font-size: 100px;
          font-weight: 700;
          max-width: 75vw;
          text-align: center;
          color: #464255;
        }
        #wait {
          width: 100vw;
          height: 100vh;
          display: flex;
          justify-content: center;
          align-items: center;
          text-align: center;
          

          background: rgba(183, 219, 249, 0.15);

        }
    </style>

    <div id="wait" style="display: none">
      <h1>Ожидаем следующего докладчика</h1>
    </div>
    <canvas id="the-canvas"></canvas>
    <script src="https://cdn.jsdelivr.net/npm/pdfjs-dist@2.14.305/build/pdf.min.js"></script>
    <script>
      var loadingTask = null
        var ppdf = null;
        var nowPage = 1;
      function load_pres(url) {
        loadingTask = pdfjsLib.getDocument(url);
        ppdf = null;
        nowPage = 1;
        loadingTask.promise.then(function(pdf) {
          ppdf = pdf;
          for (var i = 1; i <= ppdf.numPages; i += 1) {
            pdf.getPage(nowPage).then(function(page) {});
          }
          pdf.getPage(nowPage).then(function(page) {
            var scale = Math.min(window.innerWidth / page.getViewport({
              scale: 1.0
            }).width, window.innerHeight / page.getViewport({
              scale: 1.0
            }).height)
            var viewport = page.getViewport({
              scale: scale
            });
            // Support HiDPI-screens.
            var outputScale = window.devicePixelRatio || 1;
            var canvas = document.getElementById('the-canvas');
            var context = canvas.getContext('2d');
            canvas.width = Math.floor(viewport.width * outputScale);
            canvas.height = Math.floor(viewport.height * outputScale);
            canvas.style.width = Math.floor(viewport.width) + "px";
            canvas.style.height = Math.floor(viewport.height) + "px";
            var transform = outputScale !== 1 ? [outputScale, 0, 0, outputScale, 0, 0] : null;
            var renderContext = {
              canvasContext: context,
              transform: transform,
              viewport: viewport
            };
            page.render(renderContext);

            function fullscreen() {
              var el = document.getElementById('the-canvas');
              if (el.webkitRequestFullScreen) {
                el.webkitRequestFullScreen();
              } else {
                el.mozRequestFullScreen();
              }
            }
            canvas.addEventListener("click", fullscreen)
          });
        });
      }
      var socket = new WebSocket(`ws://${(window.location.host + window.location.pathname).replace('view', 'ws')}`);
      socket.onopen = function() {};
      var video_slides = [];
      var video_links = {};
      socket.onmessage = function(event) {
        const msg = JSON.parse(event.data);
        if (msg.type == "presentation") {

          var id = msg.data.newID
          if (id == -1) {
            document.getElementById("wait").style.display = "flex"
            document.getElementById("the-canvas").style.display = "none"
          } else {
            document.getElementById("wait").style.display = "none"
            document.getElementById("the-canvas").style.display = "flex"
          }
          var url = "http://api.conference.silaeder.ru/project/";
          var http = new XMLHttpRequest();
          http.open("GET", url + id, true);
          http.onload = function() {
            if (http.readyState === http.DONE) {
              if (http.status === 200) {
                // console.log(http.response);
                console.log(id);
                console.log(http.responseText);
                var response = http.responseText;
                var jsonObject = JSON.parse(response);
                load_pres(jsonObject.presentation.pdf);
                video_slides = [];
                video_links = {};
                nowPage = 1;
                for (var video of jsonObject.presentation.videos) {
                  video_slides.push(parseInt(video.after_slide));
                  video_links[parseInt(video.after_slide)] = video.YT;
                }
              }
            }
          };
          http.send(null);
        } else {
          let slide = msg.data.slide;
          nowPage = slide
          if (video_slides.includes(nowPage)) {
            window.open(`http://192.168.0.187:1617/video/${video_links[nowPage]}`, '_blank').focus();
          }
          ppdf.getPage(nowPage).then(function(page) {
            var scale = Math.min(window.innerWidth / page.getViewport({
              scale: 1.0
            }).width, window.innerHeight / page.getViewport({
              scale: 1.0
            }).height)
            var viewport = page.getViewport({
              scale: scale
            });
            // Support HiDPI-screens.
            var outputScale = window.devicePixelRatio || 1;
            var canvas = document.getElementById('the-canvas');
            var context = canvas.getContext('2d');
            canvas.width = Math.floor(viewport.width * outputScale);
            canvas.height = Math.floor(viewport.height * outputScale);
            canvas.style.width = Math.floor(viewport.width) + "px";
            canvas.style.height = Math.floor(viewport.height) + "px";
            var transform = outputScale !== 1 ? [outputScale, 0, 0, outputScale, 0, 0] : null;
            var renderContext = {
              canvasContext: context,
              transform: transform,
              viewport: viewport
            };
            page.render(renderContext);
          });
        }
        
      };
    </script>
  </body>
</html>
