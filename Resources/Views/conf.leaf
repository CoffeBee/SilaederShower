<!DOCTYPE html>
<html>
   <head>
      <link rel="stylesheet" href="/styles/home_css.css">
       <meta name="viewport" content="user-scalable=0"/>
      <script src="/home_scripts.js"></script>
      <meta charset="UTF-8">
      <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
      <script   src="https://code.jquery.com/jquery-3.6.1.min.js"   integrity="sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ="   crossorigin="anonymous"></script>
      <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://unpkg.com/vue-click@latest"></script>

   </head>
   <body>
      
      <div id="slidebar" class="slidebar" onmouseover="openNav();" onmouseout="closeNav();">
         <div id="contentInNav" style="height: calc(100% - 60px); visibility: hidden; transition: visibility 100ms;">
            <img src="/images/logo.svg" class="logo">
            <div class="sidebar-content">
               
               #for(conf in confs):
               <button class="sidebar-conferences #if(conf.selected):
               choosen
               #endif" onclick="location.href='/cf/#(conf.id)'">#(conf.title)</button>
               #endfor
               
            </div>
            <form action="/cf/add" method="post" style="position: absolute; bottom: 120px">
               <button class="sidebar-conferences "  onclick="" id="button-plus">
               <img src="/images/plus.svg" class="plus">
               </button>
            </form>
            <div class="sidebar-info">
               <div style="font-family: Raleway; font-weight: 600; color: #464255; font-size: 15px; margin-bottom: 16px;">
                  Silaeder shower system<br>
               </div>
               <div style="font-family: Raleway; font-weight: Normal; color: #a3a3a3; font-size: 13px;">
                  <div style="margin-bottom: 16px;">
                     © 2022 All Rights Reserved<br>
                  </div>
                  Made with ❤️ in Silaeder
               </div>
            </div>
         </div>
         <div id="logoInNav" style="height: calc(100% - 60px); visibility: visible; transition: visibility 100ms;">
            <img src="/images/logo_simple.svg" style="position: absolute; left: 43px; top: 30px">
         </div>
      </div>
   </div>
   <div id="app" >
      
      <div class="header">
         <span class="Info">
            
            <span class="h11" style="font-family: Raleway; font-weight: 600; font-size: 32px;border: none;
               outline: none; display: block;
               border-radius: 0;
            margin-bottom: 0px; margin-top: 0px;width: auto; background: transparent" @blur="sendTitle" contenteditable>{{title}}</span>
            <a style="text-decoration: none; color: #58CDFF; font-family: 'Raleway'; font-size: 60px; font-weight: 700; margin-top: 40px" class="gue" href="/guest">Назад</a>
            <span class="h22" style="font-family: Raleway; font-weight: 400; font-size: 14px;border: none;
               outline: none; display: block; margin-top: 16px;
               border-radius: 0;
            margin-bottom: 0px;;width: auto; background: transparent" @blur="sendDetail" contenteditable>{{detail}}</span>
         </span>
         <div class="links" style="position: absolute; right: 30px;">
            <img @click="openAdmin" @mouseover="start_hover = true" @mouseleave="start_hover = false" :class="{bhover: start_hover == true}" src="/images/start.svg" style=" background: white; padding: 17.5px; border-radius: 18px; box-sizing: border-box; height: 70px; width: 70px;">
         <img @click="openShower" @mouseover="people_hover = true" @mouseleave="people_hover = false" :class="{bhover: people_hover == true}" src="/images/peoples.svg" style="margin-left: 25px; background: white; border-radius: 18px;  padding: 17.5px; box-sizing: border-box;  height: 70px; height: 70px">
         </div>
      </div>

      <div id="plan">
         <img src="/images/add.svg" v-if="sections.length === 0" @click="sectionAdd"/>
         <div class="section" v-for="(section, index) in sections">
            <div class="sec_he" style="margin-bottom: 0"> 
               <div style="display: flex; justify-content: space-between;" v-if="index == sections.length - 1">
                  <span style="font-family: Raleway; font-weight: 500; font-size: 21px;border: none;
               outline: none; display: block;
               border-radius: 0; color: #464255;
            margin-bottom: 0px;;width: auto; background: transparent" @blur="sendName(index, $event)" contenteditable>{{section.nameStr}}</span>
                  <img src="/images/add.svg" @click="sectionAdd"/>
               </div>
                    <span v-if="index != sections.length - 1" style="font-family: Raleway; font-weight: 500; font-size: 21px;border: none;
               outline: none; display: block;
               border-radius: 0; color:  #464255;
            margin-bottom: 0px;;width: auto; background: transparent" @blur="sendName(index, $event)" contenteditable>{{section.nameStr}}</span>
            </div>
            <div @mouseover="showAdd(index, -1)"  @mouseleave="hideAdd(index, -1)"  style="min-height: 30px; min-width: 310px">
                <div style="padding-top: 15px; padding-bottom: 15px;">
                    <div class="rec_nw" style="width: 270px; min-height: 44px; background: #E2E1E5; border-radius: 25px;padding: 15px;" v-if="section.hover_add == true">
                          <input v-model="section.search" @keyup="searchProject(index, section.id)" class="new-project" placeholder="Новый проект"  />
                            <div v-if="section.results.length > 0" style="padding: 12px 25px; width: 210px;; border-radius: 25px; margin-top: 10px; background: #FFF;display: flex; flex-direction: column; gap: 10px">
                                <p v-for="(res, res_i) in section.results" style="margin: 0; font-family: 'Raleway'; font-size: 12; font-weight: 400; color: #464255" @click="addProject(index, res.id, section.id, null, -1, $event)">{{res.name}}</p>
                            </div>
                       
                    </div>
                </div>
            </div>
            <div class="projects" style="margin-bottom: 80px">
               <div :id="section.id" style="position: relative;overflow-y: scroll;display: flex;
   flex-direction: column;
   margin-bottom: 20px;">
                    <div v-for="(project, pr_id) in section.projects">
                        <div  class="project" :class="{active: project.status == 'active', done: project.status == 'done'}"  @dblclick="startPres(project.id, index, pr_id)" @mouseover="project.hover = true" @mouseleave="project.hover = false">
                            <div style="position: relative;">
                               <p class="comp" style="margin: 0; margin-left: -5px; display: inline-block; border-radius: 15px; padding: 8px 16px; background: rgba(255, 161, 38, 0.15);font-family: 'Raleway';font-style: normal;font-weight: 500;font-size: 16px;letter-spacing: 0.4px;color: #FFA126;">{{project.data.teacher}}</p>
                                <p class="title" style="margin: 0; margin-top:  15px; font-family: 'Raleway'; font-weight: 500; font-size: 18px; color: #464255">{{project.data.name}}</p>
                                <p class="time" v-if="project.status != 'active'" style="margin:  0; margin-top:  3px;font-family: 'Raleway';font-style: normal;font-weight: 400;font-size: 14px;line-height: 26px;color: #D0D6DE"> {{project.timeStr}}</p>
                                <p class="time" v-if="project.status == 'active' &&  project.rest > 0" style="margin:  0; margin-top:  3px;font-family: 'Raleway';font-style: normal;font-weight: 400;font-size: 14px;line-height: 26px;color: #D0D6DE">Осталось {{ project.restStr }}</p>
                                <p class="time" v-if="project.status == 'active' &&  project.rest <= 0" style="margin:  0; margin-top:  3px;font-family: 'Raleway';font-style: normal;font-weight: 400;font-size: 14px;line-height: 26px;color: #FF5B5B">Время вышло</p>

                                <p class="end stop" @click="stopPres(project.id, index, pr_id)" v-if="project.status == 'active'">Завершить</p>
                            
                                <Transition>
                                    <img v-if="project.hover === true" @click="removeProject(project.id, index, pr_id)" src="/images/del.svg" style="position: absolute; top: 5px; right: 0px; width: 10px; height: 10px;" />
                                </Transition>
                            </div>
                        </div>
                        <div @mouseover="showAdd(index, pr_id)"  @mouseleave="hideAdd(index, pr_id)"  style="min-height: 30px; min-width: 310px">
                            <div style="padding-top: 15px; padding-bottom: 15px;">
                                <div class="rec_nw" style="width: 270px; min-height: 44px; background: #E2E1E5; border-radius: 25px;padding: 15px;" v-if="project.hover_add == true">
                                      <input v-model="section.search" @keyup="searchProject(index, section.id)" class="new-project" placeholder="Новый проект"  />
                                        <div v-if="section.results.length > 0 || section.from_dir.length !== 0" style="padding: 12px 25px; width: 210px;; border-radius: 25px; margin-top: 10px; background: #FFF;display: flex; flex-direction: column; gap: 10px">
                                            <p v-if="section.from_dir.length !== 0" style="margin: 0; font-family: 'Raleway'; font-size: 12; font-weight: 700; color: #464255"  @click="addProjects(index, section.id, project.id, pr_id, 0, $event)">>Все из: {{section.direction}}</p>
                                            <div v-if="section.results.length > 0">
                                                <p v-for="(res, res_i) in section.results" style="margin: 0; font-family: 'Raleway'; font-size: 12; font-weight: 400; color: #464255" @click="addProject(index, res.id, section.id, project.id, pr_id, $event)">{{res.name}}</p>
                                            </div>
                                            
                                        </div>
                                   
                                </div>
                            </div>
                        </div>

                    </div>

               
            </div>
         </div>
      </div>
   </div>
   <script>
   openNav();
   </script>
</body>

<script>

const {createApp} = Vue
createApp({
   data() {
      return {
         title: '#(title)',
         detail: '#(detail)',
         confID: '#(confID)',
         sections: [],
         start_hover: false,
         people_hover: false,
         hovered: null,
         all_ids: [],
         max_time: 0
      }
   },
   mounted() {
      if (window.screen.width < 768) {
         document.getElementById("slidebar").style.display = "none"
         document.getElementById("app").style.marginLeft = "10px"
      }
    axios({
        method: 'get',
        url: '/cf/section/' + this.confID
      }).then((response) => {
       this.sections = response.data
       this.sections.forEach( (section, sec_i) => {
        this.sections[sec_i].results = [];
        this.sections[sec_i].from_dir = [];
        this.sections[sec_i].nameStr = this.sections[sec_i].name
         this.sections[sec_i].projects.forEach( (proj, proj_i) => {

            axios({
                 method: 'get',
                 url: 'http://api.conference.silaeder.ru/project/' + this.sections[sec_i].projects[proj_i].frgnID,
               }).then( (response) => {
                this.all_ids.push(this.sections[sec_i].projects[proj_i].frgnID);
                this.sections[sec_i].projects[proj_i].data = response.data
                let stop = this.sections[sec_i].projects[proj_i].stoppedAt 
                  let start = this.sections[sec_i].projects[proj_i].startedAt
                if (this.sections[sec_i].projects[proj_i].status == "done") {
                  this.sections[sec_i].projects[proj_i].timeStr = this.prettyTime(start) + " - " + this.prettyTime(stop)
                }
                if (typeof stop !== "number") {
                    if (typeof start === "number") {
                        this.max_time = Math.max(this.max_time, start + response.data.time * 60)
                    }
                } else {
                    this.max_time = Math.max(this.max_time, stop)
                }
                
                  this.sections[sec_i].projects[proj_i].restUpdater = setInterval(() => {
                      this.updateRests(sec_i, proj_i)
                     }, 1000)
              })
              .catch(function (error) {
                console.log(error);
              });
         } )
      });
     })
     .catch(function (error) {
       console.log(error);
     });
     setTimeout(this.calcTimeStr, 3000)
  },
   methods: {
    prettyTime(unix) {
      let date = new Date(unix * 1000)
      return ("0" + date.getHours()).substr(-2) + ":" + ("0" + date.getMinutes()).substr(-2)
    },
    calcTimeStr() {
        let now = this.max_time
       
        this.sections.forEach( (section, sec_i) => {
             let mx = 0
            let mn = 100000000000
            this.sections[sec_i].projects.forEach( (proj, proj_i) => {
                if (this.sections[sec_i].projects[proj_i].status == "none") {
                    let start = now
                    let stop = now + 60 * this.sections[sec_i].projects[proj_i].data.time
                    this.sections[sec_i].projects[proj_i].timeStr = "etc " + this.prettyTime(start) + " - " + this.prettyTime(stop)
                    now = now + 60 * this.sections[sec_i].projects[proj_i].data.time
                    mn = Math.min(start, mn)
                    mx = Math.max(stop, mx)
                } else if (this.sections[sec_i].projects[proj_i].status === "done") {
                    mn = Math.min(this.sections[sec_i].projects[proj_i].startedAt, mn)
                    mx = Math.max(this.sections[sec_i].projects[proj_i].stoppedAt, mx)
                }
            })
            this.sections[sec_i].nameStr = this.sections[sec_i].name + ` ${this.prettyTime(mn) + " - " + this.prettyTime(mx)}`
        })
    },
    sendTitle(e) {
      this.title = e.target.innerHTML;
      axios({
        method: 'post',
        url: '/cf/title/' + this.confID,
        data: {
          title: this.title,
        }
      }).then(function (response) {
       console.log(response);
     })
     .catch(function (error) {
       console.log(error);
     });
    },
    sendDetail(e) {
      this.detail = e.target.innerHTML;
      axios({
        method: 'post',
        url: '/cf/detail/' + this.confID,
        data: {
          detail: this.detail,
        }
      }).then(function (response) {
       console.log(response);
     })
     .catch(function (error) {
       console.log(error);
     });
    },
    sectionAdd(e) {
      axios({
        method: 'post',
        url: '/cf/section/' + this.confID
      }).then( (response) => {
       this.sections.push(response.data)
       this.sections[this.sections.length - 1].results = [];
       this.sections[this.sections.length - 1].from_dir = [];
     })
     .catch(function (error) {
       console.log(error);
     });
    },
    sendName(sec_index, e) {
      this.sections[sec_index].name = e.target.innerHTML;
      axios({
        method: 'post',
        url: '/cf/sc/name/' + this.sections[sec_index].id,
        data: {
          name: this.sections[sec_index].name,
        }
      }).then(function (response) {
       console.log(response);
     })
     .catch(function (error) {
       console.log(error);
     });
    },
    searchProject(index) {
      axios({
        method: 'get',
        url: 'http://api.conference.silaeder.ru/project?q=' + this.sections[index].search,
      }).then( (response) => {
        let resp = response.data.filter((x) => { return !this.all_ids.includes(x.id) })
       if (resp> 5) {
         this.sections[index].results = []
       } else {
         this.sections[index].results = resp
       }
     })
     .catch(function (error) {
       console.log(error);
     });

     axios({
        method: 'get',
        url: 'http://api.conference.silaeder.ru/project?s=' + this.sections[index].search.toLowerCase(),
      }).then( (response) => {
       if (response.data.length != 0) {
        this.sections[index].direction = response.data[0].direction;
        this.sections[index].from_dir = response.data;
       } else {
        this.sections[index].from_dir = [];
        this.sections[index].direction = null;
       }
     })
     .catch(function (error) {
       console.log(error);
     });

    },
    addProject(sec_index, proj_id, sectionID, after, new_i, e) {
         this.all_ids.push(proj_id);
      axios({
        method: 'post',
        url: '/cf/sc/project/' + this.sections[sec_index].id,
        data: {
          id: proj_id,
          after: after
        }
      }).then((response) => {
         var new_proj = response.data
       axios({
                 method: 'get',
                 url: 'http://api.conference.silaeder.ru/project/' + new_proj.frgnID,
               }).then( (responsee) => {
                  new_proj.data
                  new_proj.data = responsee.data
                   this.sections[sec_index].projects.splice(new_i + 1, 0, new_proj);
                   this.calcTimeStr()
                  let proj_i = new_i + 1
                  this.sections[sec_index].projects[proj_i].restUpdater = setInterval(() => {
                      this.updateRests(sec_index, proj_i)
                     }, 1000)
                  this.searchProject(sec_index);
                  
              })
              .catch(function (error) {
                console.log(error);
              });
     })
     .catch(function (error) {
       console.log(error);
     });
    },
    addProjects(sec_index, sectionID, after, new_i, l_i, e) {
        if (l_i == this.sections[sec_index].from_dir.length) {
            return;
        }
        let proj_id = this.sections[sec_index].from_dir[l_i].id;
        if (this.all_ids.includes(proj_id)) {
            this.addProjects(sec_index, sectionID, after, new_i, l_i + 1, e);
            return;
        }
      axios({
        method: 'post',
        url: '/cf/sc/project/' + this.sections[sec_index].id,
        data: {
          id: proj_id,
          after: after
        }
      }).then((response) => {
         var new_proj = response.data
       axios({
                 method: 'get',
                 url: 'http://api.conference.silaeder.ru/project/' + new_proj.frgnID,
               }).then( (responsee) => {
                  new_proj.data
                  new_proj.data = responsee.data
                   this.sections[sec_index].projects.splice(new_i + 1, 0, new_proj);
                   this.calcTimeStr()
                  let proj_i = new_i + 1
                  this.sections[sec_index].projects[proj_i].restUpdater = setInterval(() => {
                      this.updateRests(sec_index, proj_i)
                     }, 1000)
                  this.addProjects(sec_index, sectionID, after, new_i, l_i + 1, e)
                  
              })
              .catch(function (error) {
                console.log(error);
              });
     })
     .catch(function (error) {
       console.log(error);
     });
    },
    removeProject(pr_id, sec_i, pr_i) {
        var index = this.all_ids.indexOf(this.sections[sec_i].projects[pr_i].frgnID);
        if (index !== -1) {
          this.all_ids.splice(index, 1);
        }
      this.sections[sec_i].projects.splice(pr_i, 1);
      axios({
        method: 'post',
        url: '/cf/pr/del/' + pr_id
      }).then(function (response) {
       console.log(response);
     })
     .catch(function (error) {
       console.log(error);
     });
    },
    startPres(pr_id, sec_i, pr_index) {
      console.log(this.start_start)
      
      axios({
        method: 'post',
        url: '/cf/sh/prs/' + this.confID,
        data: {newID: pr_id},
      }).then((response) => {
       for (var i = 0; i < this.sections[sec_i].projects.length; i++) {
         if (this.sections[sec_i].projects[i].status == "active") {
            this.sections[sec_i].projects[i].status = "done"
            this.sections[sec_i].projects[i].stoppedAt = Date.now() / 1000
            let stop = this.sections[sec_i].projects[i].stoppedAt 
                  let start = this.sections[sec_i].projects[i].startedAt
                  this.sections[sec_i].projects[i].timeStr = this.prettyTime(start) + " - " + this.prettyTime(stop)
         }
       }
      this.sections[sec_i].projects[pr_index].status = "active"
       this.sections[sec_i].projects[pr_index].startedAt = Date.now() / 1000
       this.max_time = this.sections[sec_i].projects[pr_index].startedAt + this.sections[sec_i].projects[pr_index].data.time * 60
       this.calcTimeStr()

     })
     .catch(function (error) {
       console.log(error);
     });
    },
    updateRests(sec_i, proj_i) {
     let rest = Date.now() / 1000 - this.sections[sec_i].projects[proj_i].startedAt;
                rest = this.sections[sec_i].projects[proj_i].data.time * 60 - rest
      let restDate = new Date(rest * 1000)
                var minutes = "0" + restDate.getMinutes();
                var seconds = "0" + restDate.getSeconds();
      this.sections[sec_i].projects[proj_i].restStr = minutes.substr(-2) + ':' + seconds.substr(-2);
      this.sections[sec_i].projects[proj_i].rest = rest

         
    },
    stopPres(pr_id, sec_i, pr_index) {
      console.log(this.start_start)
      
      axios({
        method: 'post',
        url: '/cf/sh/stop/' + this.confID,
        data: {newID: pr_id},
      }).then((response) => {
       for (var i = 0; i < this.sections[sec_i].projects.length; i++) {
         if (this.sections[sec_i].projects[i].status == "active") {
            this.sections[sec_i].projects[i].status = "done"
            this.sections[sec_i].projects[i].stoppedAt = Date.now() / 1000
            let stop = this.sections[sec_i].projects[i].stoppedAt 
                  let start = this.sections[sec_i].projects[i].startedAt
                  this.sections[sec_i].projects[i].timeStr = this.prettyTime(start) + " - " + this.prettyTime(stop)
            this.max_time = stop
            this.calcTimeStr()
         }
       }
     })
     .catch(function (error) {
       console.log(error);
     });
    },
    openShower() {
         window.open('/cf/view/#(confID)').focus()
    },
    openAdmin() {
         window.open('/cf/admin/#(confID)').focus()
    },
    showAdd(sec_i, pr_id) {
        if (pr_id == -1) {
            this.sections[sec_i].h_timer = setTimeout(() => {
                this.sections[sec_i].hover_add = true
            }, 100)
        }
        else {
            this.sections[sec_i].projects[pr_id].h_timer = setTimeout(() => {
                this.sections[sec_i].projects[pr_id].hover_add = true
            }, 100)
        }
    },
    hideAdd(sec_i, pr_id) {
        if (pr_id == -1) {
            clearTimeout(this.sections[sec_i].h_timer)
            this.sections[sec_i].h_timer = setTimeout(() => {
                this.sections[sec_i].hover_add = false
            }, 100)
        }
        else {
            clearTimeout(this.sections[sec_i].projects[pr_id].h_timer)
            this.sections[sec_i].projects[pr_id].h_timer = setTimeout(() => {
                this.sections[sec_i].projects[pr_id].hover_add = false
            }, 100)
        }
        
    }
  }
}).mount('#app')
</script>
</html>
